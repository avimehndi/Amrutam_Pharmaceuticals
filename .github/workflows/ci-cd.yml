name: CI/CD Pipeline

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run Linters
        run: |
          cd frontend && npm run lint
          cd ../backend && npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run Tests
        run: |
          cd frontend && npm test -- --coverage
          cd ../backend && npm test -- --coverage

      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            frontend/coverage
            backend/coverage

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }} ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }} ./backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Deploy to Staging
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.STAGING_HOST }} \
            "cd /srv/my-web-app && docker-compose pull && docker-compose up -d"

      - name: Smoke Tests
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.STAGING_HOST }} "npm run smoke"

      - name: Notify Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"âœ… Staging deployed: `${{ github.sha }}`"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Manual Approval
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Deploy to Production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.PROD_HOST }} \
            "cd /srv/my-web-app && docker-compose pull && docker-compose up -d"

      - name: Flush Redis Cache
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.PROD_HOST }} \
            "docker exec \$(docker ps -qf \"name=redis\") redis-cli FLUSHALL"

      - name: Notify Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ Production deployed: `${{ github.sha }}`"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Rollback Production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
            cd /srv/my-web-app
            docker-compose down
            docker-compose pull frontend:previous
            docker-compose pull backend:previous
            docker-compose up -d
          EOF
